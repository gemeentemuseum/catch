<?php
/**
 * @file
 * Mus search primary module file. Note that most of the functionality is placed in a Drupal agnostic class.
 */
define('MUSSEARCH_MAPPING_CSV', 'config/mapping.csv');

/**
 * Implements hook_menu().
 */
function mussearch_menu() {
  $items = array();

  $items['service/mus/search'] = array(
    'title' => 'Mus service',
    'page callback' => 'mussearch_search_callback',
    'access arguments' => array('access content')
  );
  $items['service/mus/detail/%'] = array(
    'title' => 'Mus service',
    'page callback' => 'mussearch_detail_callback',
    'page arguments' => array(3),
    'access arguments' => array('access content')
  );

  $items['admin/config/search/musapi'] = array(
    'title' => 'Administer MuS api',
    'description' => 'Setup MuS search api settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mussearch_admin_settings'),
    'access arguments' => array('administer mus api'),
    'file' => 'mussearch.admin.inc',
  );
  $items['admin/config/search/musapimap'] = array(
    'title' => 'MuSapi map utility',
    'description' => 'MuS search map utility to create map and schema.xml file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mussearch_map_utility'),
    'access arguments' => array('administer mus api'),
    'file' => 'mussearch.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mussearch_permission() {
   return array(
    'administer mus api' => array(
      'title' => t('Administer MuS search api'),
    ),
  );
}

/**
 * Main callback function for the service.
 * Writes out xml and exits
 */
function mussearch_search_callback() {
  $server_info = mussearch_get_server_info();
  // Create a new mus sorl request alterator
  $alterator = new MuSSolrRequestAlterator($server_info->host, $server_info->port, $server_info->path, $_SERVER['QUERY_STRING']);
  $response = $alterator->doSolrRequest();
  drupal_add_http_header('Content-type', 'text/xml');
  print $response->getRaw();
  exit();
}

/**
 * Detail callback of the service
 * Writes out xml and exits
 */
function mussearch_detail_callback($id) {
  $server_info = mussearch_get_server_info();
  // Create a new mus sorl request alterator
  $alterator = new MuSSolrRequestAlterator($server_info->host, $server_info->port, $server_info->path);
  $query = 'item_id:' . check_plain($id);
  try {
    $alterator->addParam('q', $query);
    $alterator->addParam('qt', 'detail');
    $response = $alterator->doSolrRequest();
    drupal_add_http_header('Content-type', 'text/xml');
    print $response->getRaw();
    exit();
  } catch (Exception $e) {
    // TODO: write error document
    watchdog('mussearch', $e->getMessage(), WATCHDOG_ERROR);
    return 'error';
  }
}

/**
 * Change the way the index's field names are mapped to Solr field names.
 *
 * @param $index
 *   The index whose field mappings are altered.
 * @param array $fields
 *   An associative array containing the index field names mapped to their Solr
 *   counterparts. The special fields 'search_api_id' and 'search_api_relevance'
 *   are also included.
 */
function mussearch_search_api_solr_field_mapping_alter(SearchApiIndex $index, array &$fields) {
  $field_mappings = mussearch_get_solr_fieldmappings();
  if ($index->item_type == 'node' && is_array($field_mappings)) {
    foreach ($field_mappings as $key => $value) {
      if (isset($fields[$key])) {
        $fields[$key] = $value;
      }
    }
  }
}
/**
 * Utility functions
 */

/**
 * Get the solr field mappings
 */
function mussearch_get_solr_fieldmappings() {
  $field_mappings = parse_ini_file('fieldmappings.map');
  return $field_mappings;
}

/**
 * Get the server to use
 * @return $index
 *   Server info object if the server exists, otherwise FALSE
 */
function mussearch_get_server_info() {
  $index_id = variable_get('mussearch_index', 0);
  if ($index_id) {
    $index = search_api_index_load($index_id);
    $server = search_api_server_load($index->server);
    $server_info = new stdClass();
    $server_info->host = $server->options['host'];
    $server_info->port = $server->options['port'];
    $server_info->path = $server->options['path'];
    $server_info->index = $index_id;
    return $server_info;
  }
  return FALSE;
}