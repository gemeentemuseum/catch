<?php
/**
 * @file
 * Mus search primary module file. Note that most of the functionality is placed in a Drupal agnostic class.
 */

/**
 * Implements hook_menu().
 */
function mussearch_menu() {
  $items = array();

  $items['service/mus'] = array(
    'title' => 'Mus service',
    'page callback' => 'mussearch_search_callback',
    'access arguments' => array('access content')
  );

  $items['admin/config/search/musapi'] = array(
    'title' => 'Administer MuS api',
    'description' => 'Setup MuS search api settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mussearch_admin_settings'),
    'access arguments' => array('administer mus api'),
    'file' => 'mussearch.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mussearch_permission() {
   return array(
    'administer mus api' => array(
      'title' => t('Administer MuS search api'),
    ),
  );
}

/**
 * Main callback function for the service.
 * Writes out xml and exits
 */
function mussearch_search_callback() {
  $server_info = mussearch_get_server_info();
  // Create a new mus sorl request alterator
  $alterator = new MuSSolrRequestAlterator($server_info->host, $server_info->port, $server_info->path, $_SERVER['QUERY_STRING']);
  $response = $alterator->doSolrRequest();
  return check_plain($response->getRaw());
}

/**
 * Utility functions
 */

/**
 * Get the server to use
 * @return $index
 *   Server info object if the server exists, otherwise FALSE
 */
function mussearch_get_server_info() {
  $index_id = variable_get('mussearch_index', 0);
  if ($index_id) {
    $index = search_api_index_load($index_id);
    $server = search_api_server_load($index->server);
    $server_info = new stdClass();
    $server_info->host = $server->options['host'];
    $server_info->port = $server->options['port'];
    $server_info->path = $server->options['path'];
    $server_info->index = $index_id;
    return $server_info;
  }
  return FALSE;
}