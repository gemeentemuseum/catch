<?php
/**
 * Implements hook_requirements.
 *
 * @param $phase
 *
 * @return array $requirements
 *  Array with status information.
 */
function adlib_status_requirements($phase): array {
  $requirements = array();
  if ($phase === 'runtime') {
    // Connection status of Adlib servers.
    // First get implemented servers.
    include_once(DRUPAL_ROOT . '/includes/install.inc');
    module_load_include('inc', 'ctools', 'includes/export');
    $adlib_items = ctools_export_crud_load_all('adlibapi_databases', false);
    foreach ($adlib_items as $preset) {
      $severity = REQUIREMENT_INFO;
      $message = '';
      if (isset($preset->config)) {
        _adlibapi_deserialize_config($preset);
        /*
        * Get the version of the database
        * If the version is lower than the recommended version, show database textfield instead of select.
        */
        if (isset($preset->url)) {
          $version = adlibapi_api_get_version($preset);
          if (count($version) === 0) {
            $message = t('Unable to connect to OPAC server.');
            $severity = REQUIREMENT_ERROR;
          }
          else {
            // Show error if version is less than minimum version
            if (version_compare($version['Version'], ADLIBAPI_MINIMUM_WWWOPAC_VERSION, "<")) {
              $show_select = FALSE;
              $message = t('The api version of wwwopac is lower than the recommended version. Recommended is %minimum or higher, the current version is %current', array('%minimum' => ADLIBAPI_MINIMUM_WWWOPAC_VERSION, '%current' => $version['Version']));
              $severity = REQUIREMENT_WARNING;
            }
            else {
              $message = t('The OPAC server was contacted. The version of the server is: %version', array('%version' => $version['Version']));
              $severity = REQUIREMENT_OK;
            }
          }
        }
      }
      $requirements['adlib_conn_status_' . $preset->name]['title'] = t('Adlib connection status for %server_name', array('%server_name' => $preset->name));
      $requirements['adlib_conn_status_' . $preset->name]['description'] = t('Checks the connection to the Adlib server');
      $requirements['adlib_conn_status_' . $preset->name]['value'] = $message;
      $requirements['adlib_conn_status_' . $preset->name]['severity'] = $severity;
    }


    // Status index
    // Get all the Search API indexes.
    $servers = search_api_server_load_multiple(FALSE);
    $indexes = array();
    foreach (search_api_index_load_multiple(FALSE) as $index) {
      if ($index->enabled) {
        $status = search_api_index_status($index);
        $all = ($status['indexed'] === $status['total']);
        if ($all) {
          $message = t('All items have been indexed (@total / @total).', array('@total' => $status['total']));
          $severity = REQUIREMENT_OK;
        }
        elseif (!$status['indexed']) {
          $message = t('All items still need to be indexed (@total total).', array('@total' => $status['total']));
          $severity = REQUIREMENT_WARNING;
        }
        else {
          $percentage = (int) (100 * $status['indexed'] / $status['total']);
          $message = t('About @percentage% of all items have been indexed in their latest version (@indexed / @total).',
                       array('@indexed' => $status['indexed'], '@total' => $status['total'], '@percentage' => $percentage));
          $severity = REQUIREMENT_INFO;
        }
        $requirements['adlib_index_status_' . $index->name]['title'] = t('Adlib index status for index %name', array('%name' => $index->name));
        $requirements['adlib_index_status_' . $index->name]['description'] = t('Shows the status of indexed items');
        $requirements['adlib_index_status_' . $index->name]['value'] = $message;
        $requirements['adlib_index_status_' . $index->name]['severity'] = $severity;
      }
    }
  }
  return $requirements;
}
